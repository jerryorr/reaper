<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:blogger="http://schemas.google.com/blogger/2008" xmlns:gd="http://schemas.google.com/g/2005" xmlns:georss="http://www.georss.org/georss" xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/" xmlns:thr="http://purl.org/syndication/thread/1.0">
   <id>tag:blogger.com,1999:blog-6466545174058573557</id>
   <updated>2014-02-12T14:17:21.008-05:00</updated>
   <category term="dojo store dijit select" />
   <category term="jsf facelets custom converter attributes" />
   <category term="open source software government petition" />
   <title type="text">Jerry on Java</title>
   <subtitle type="html">Thoughts and tips from my experiences in Java EE and web development.</subtitle>
   <link rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml" href="http://blog.jerryorr.com/feeds/posts/default" />
   <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default" />
   <link rel="alternate" type="text/html" href="http://blog.jerryorr.com/" />
   <link rel="hub" href="http://pubsubhubbub.appspot.com/" />
   <author>
      <name>Jerry Orr</name>
      <uri>http://www.blogger.com/profile/06855141821400610431</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="http://2.bp.blogspot.com/-t8W_uziUTT8/To9NhZ9vqbI/AAAAAAAAAAc/5tVtYT29bwo/s220/jerry%2Bheadshot.jpg" />
   </author>
   <generator version="7.00" uri="http://www.blogger.com">Blogger</generator>
   <openSearch:totalResults>9</openSearch:totalResults>
   <openSearch:startIndex>1</openSearch:startIndex>
   <openSearch:itemsPerPage>25</openSearch:itemsPerPage>
   <entry>
      <id>tag:blogger.com,1999:blog-6466545174058573557.post-7994955495043480461</id>
      <published>2013-10-31T09:54:00.000-04:00</published>
      <updated>2013-10-31T09:54:54.923-04:00</updated>
      <title type="text">Using Node.js streams to massage data into the format you want</title>
      <content type="html">Google provides some pretty cool flu data in &lt;a href="http://www.google.org/flutrends/us/data.txt" target="_blank"&gt;CSV format&lt;/a&gt;, and I wanted to display that in a chart at&amp;nbsp;&lt;a href="https://www.thedash.com/" target="_blank"&gt;Dash&lt;/a&gt;. However, the raw data isn't quite right for my needs:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;It has a bunch of intro/header text (copyright stuff, description of the data, etc), and Dash needs just the raw data.&lt;/li&gt;&lt;li&gt;It shows dozens of states/regions/cities, and I just want to show overall U.S. data and my home state.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Fortunately, Dash can read data from any publicly accessible endpoint, so I decided to throw together a quick&amp;nbsp;&lt;a href="http://nodejs.org/" target="_blank"&gt;Node.js&lt;/a&gt;&amp;nbsp;app to massage the data into what I needed. The most straightforward solution was probably to load the whole file, read through it line by line, build up an array of data, then write it out. And since the data feed is currently just under 400KB, maybe that would have been alright. But a better pattern (and more fun, IMO) is to take advantage of Node Streams. As long as we use streams throughout the entire process, we can make sure that only a small buffer is kept in memory at any given time.&lt;br /&gt;&lt;br /&gt;If you just want to see the full app,&amp;nbsp;&lt;a href="https://github.com/jerryorr/sniffles" target="_blank"&gt;it's on GitHub&lt;/a&gt;. Otherwise, read on to see my thought process.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;Filter out the intro/header text&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;First, we'll write a stream that filters out the copyright/overview stuff and passes on the rest:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre class="brush: js"&gt;var stream = require('stream')&lt;br /&gt;  , util = require('util')&lt;br /&gt;&lt;br /&gt;function CleanIntro(options) {&lt;br /&gt;  stream.Transform.call(this, options)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;util.inherits(CleanIntro, stream.Transform)&lt;br /&gt;&lt;br /&gt;CleanIntro.prototype._transform = function (chunk, enc, cb) {&lt;br /&gt;  if (this.readingData) {&lt;br /&gt;    this.push(chunk, enc)&lt;br /&gt;  } else {&lt;br /&gt;    // Ignore all text until we find a line beginning with 'Date,''&lt;br /&gt;    var start = chunk.toString().search(/^Date,/m)&lt;br /&gt;    if (start !== -1) {&lt;br /&gt;      this.readingData = true&lt;br /&gt;      this.push(chunk.slice(start), enc)&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;  cb()&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;A Transform stream simply takes data that was piped in from another stream, does whatever it wants to it, then pushes whatever it wants back out. In our case, we're just ignoring anything before the actual data begins, then pushing the rest of the data back out. Easy.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Parse the CSV data&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Now that we have a filter to get just the raw CSV data, we can start parsing it. There are lots of CSV parsing libraries out there; I like&amp;nbsp;&lt;a href="https://npmjs.org/package/csv-stream" target="_blank"&gt;csv-stream&lt;/a&gt;&amp;nbsp;because, well, it's a stream. So our basic process is to make the HTTP request, pipe it to our header-cleaning filter, then pipe it to csv-stream and start working with the data:&lt;/div&gt;&lt;div&gt;&lt;pre class="brush: js"&gt;var request = require('request')&lt;br /&gt;  , csv = require('csv-stream')&lt;br /&gt;  , util = require('util')&lt;br /&gt;  , _ = require('lodash')&lt;br /&gt;  , moment = require('moment')&lt;br /&gt;  , OutStream = require('./out-stream')&lt;br /&gt;  , CleanIntroFilter = require('./clean-intro-filter')&lt;br /&gt;&lt;br /&gt;// Returns a Stream that emits CSV records from Google Flu Trends.&lt;br /&gt;// options:&lt;br /&gt;//   - regions: an array of regions for which data should be generated.&lt;br /&gt;//     See http://www.google.org/flutrends/us/data.txt for possible values&lt;br /&gt;module.exports = function (options) {&lt;br /&gt;  options = _.extend({&lt;br /&gt;    regions: ['United States']&lt;br /&gt;  }, options)&lt;br /&gt;&lt;br /&gt;  var earliest = moment().subtract('years', 1)&lt;br /&gt;&lt;br /&gt;  request('http://www.google.org/flutrends/us/data.txt')&lt;br /&gt;    .pipe(new CleanIntroFilter())&lt;br /&gt;    .pipe(csv.createStream({}))&lt;br /&gt;    .on('error',function(err){&lt;br /&gt;        // Oops, got an error&lt;br /&gt;    })&lt;br /&gt;    .on('data',function(data) {&lt;br /&gt;      var date = moment(data.Date)&lt;br /&gt;&lt;br /&gt;      // Only return data from the past year&lt;br /&gt;      if (date.isAfter(earliest) || date.isSame(earliest)) {&lt;br /&gt;        // Let's build the output String...&lt;br /&gt;        console.log(data.Date + ',' + _.map(options.regions, function (region) {&lt;br /&gt;          return data[region]&lt;br /&gt;        }).join())&lt;br /&gt;      }&lt;br /&gt;    })&lt;br /&gt;    .on('end', function () {&lt;br /&gt;      // Okay we're done, now what?&lt;br /&gt;    })&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Alright, now we're getting close. We've built the CSV output, but now what do we do with it? Push it all into an array and return that? &lt;b&gt;NO!&lt;/b&gt; Remember, we'll lose the slim memory benefits of streams if we don't keep using them the whole way through.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Write out to another Stream&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Instead, let's just make our own writeable stream:&lt;/div&gt;&lt;div&gt;&lt;pre class="brush: js"&gt;var stream = require('stream')&lt;br /&gt;&lt;br /&gt;var OutStream = function() {&lt;br /&gt;  stream.Transform.call(this,{objectMode: false})&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;OutStream.prototype = Object.create(&lt;br /&gt;  stream.Transform.prototype, {constructor: {value: OutStream}} )&lt;br /&gt;&lt;br /&gt;OutStream.prototype._transform = function(chunk, encoding, callback) {&lt;br /&gt;  this.push(chunk, encoding)&lt;br /&gt;  callback &amp;amp;&amp;amp; callback()&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;OutStream.prototype.write = function () {&lt;br /&gt;  this._transform.apply(this, arguments)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;OutStream.prototype.end = function () {&lt;br /&gt;  this._transform.apply(this, arguments)&lt;br /&gt;  this.emit('end')&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And now our parsing function can return that stream and write to it: &lt;br /&gt;&lt;pre class="brush: js"&gt;module.exports = function (options) {&lt;br /&gt;  options = _.extend({&lt;br /&gt;    regions: ['United States']&lt;br /&gt;  }, options)&lt;br /&gt;&lt;br /&gt;  var out = new OutStream()&lt;br /&gt;  out.write('Date,' + options.regions.join())&lt;br /&gt;&lt;br /&gt;  var earliest = moment().subtract('years', 1)&lt;br /&gt;&lt;br /&gt;  request('http://www.google.org/flutrends/us/data.txt')&lt;br /&gt;    .pipe(new CleanIntroFilter())&lt;br /&gt;    .pipe(csv.createStream({}))&lt;br /&gt;    .on('error',function(err){&lt;br /&gt;        out.emit('error', err)&lt;br /&gt;    })&lt;br /&gt;    .on('data',function(data) {&lt;br /&gt;      var date = moment(data.Date)&lt;br /&gt;&lt;br /&gt;      // Only return data from the past year&lt;br /&gt;      if (date.isAfter(earliest) || date.isSame(earliest)) {&lt;br /&gt;        out.write(data.Date + ',' + _.map(options.regions, function (region) {&lt;br /&gt;          return data[region]&lt;br /&gt;        }).join())&lt;br /&gt;      }&lt;br /&gt;    })&lt;br /&gt;    .on('end', function () {&lt;br /&gt;      out.end()&lt;br /&gt;    })&lt;br /&gt;&lt;br /&gt;  return out&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;h3&gt;Serve it up&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Finally, we'll use&amp;nbsp;&lt;a href="http://expressjs.com/" target="_blank"&gt;Express&lt;/a&gt;&amp;nbsp;to expose our data as a web endpoint:&lt;/div&gt;&lt;div&gt;&lt;pre class="brush: js"&gt;var express = require('express')&lt;br /&gt;  , data = require('./lib/data')&lt;br /&gt;  , _ = require('lodash')&lt;br /&gt;&lt;br /&gt;var app = express()&lt;br /&gt;&lt;br /&gt;app.get('/', function(req, res){&lt;br /&gt;  var options = {}&lt;br /&gt;&lt;br /&gt;  if (req.query.region) {&lt;br /&gt;    options.regions = _.isArray(req.query.region) ? req.query.region : [req.query.region]&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  res.setHeader('Content-Type', 'text/csv')&lt;br /&gt;&lt;br /&gt;  data(options)&lt;br /&gt;    .on('data', function (data) {&lt;br /&gt;      res.write(data)&lt;br /&gt;      res.write('\n')&lt;br /&gt;    })&lt;br /&gt;    .on('end', function (data) {&lt;br /&gt;      res.end()&lt;br /&gt;    })&lt;br /&gt;    .on('error', function (err) {&lt;br /&gt;      console.log('error: ', error)&lt;br /&gt;    })&lt;br /&gt;})&lt;br /&gt;&lt;br /&gt;var port = process.env.PORT || 5000&lt;br /&gt;app.listen(port)&lt;br /&gt;console.log('Listening on port ' + port)&lt;/pre&gt;&lt;br /&gt;Once again, note that as soon as we get data from our stream, we manipulate and write it out to another stream (the HTTP response, in this case). This keeps us from holding a lot of data in memory unnecessarily.&lt;br /&gt;&lt;br /&gt;Now if we fire up the server, we can use curl to see it in action:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: text"&gt;$ curl 'http://localhost:5000'&lt;br /&gt;Date,United States&lt;br /&gt;2012-11-04,2492&lt;br /&gt;2012-11-11,2913&lt;br /&gt;2012-11-18,3040&lt;br /&gt;2012-11-25,3641&lt;br /&gt;2012-12-02,4427&lt;br /&gt;[and so on]&lt;br /&gt;&lt;br /&gt;$ curl 'http://localhost:5000?region=United%20States&amp;amp;region=Pennsylvania'&lt;br /&gt;Date,United States,Pennsylvania&lt;br /&gt;2012-11-04,2492,2579&lt;br /&gt;2012-11-11,2913,2889&lt;br /&gt;2012-11-18,3040,2785&lt;br /&gt;2012-11-25,3641,3248&lt;br /&gt;2012-12-02,4427,3679&lt;br /&gt;[and so on]&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;As long the server is running someplace that is accessible to the public, we can head on over to&amp;nbsp;&lt;a href="http://thedash.com/" target="_blank"&gt;Dash&lt;/a&gt;&amp;nbsp;and plug it into a Custom Chart widget, giving us something like this:&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-L56A2zETw1A/UnJfQJdvz-I/AAAAAAAABxU/lthJBmR2nIE/s1600/flu+chart+in+Dash.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="264" src="http://3.bp.blogspot.com/-L56A2zETw1A/UnJfQJdvz-I/AAAAAAAABxU/lthJBmR2nIE/s640/flu+chart+in+Dash.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;Hey, looks like December and January are big months for the flu in the U.S. Who knew?&lt;br /&gt;&lt;br /&gt;Want to try this yourself? The full source for this app &lt;a href="https://github.com/jerryorr/sniffles" target="_blank"&gt;is on GitHub&lt;/a&gt;, along with step-by-step instructions for running the project and creating a widget in Dash. Enjoy!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;link href="//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/styles/shCore.min.css" rel="stylesheet" type="text/css"&gt;&lt;/link&gt;  &lt;link href="//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/styles/shThemeRDark.min.css" rel="stylesheet" type="text/css"&gt;&lt;/link&gt;  &lt;script src="//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shCore.min.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushJScript.min.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushPlain.min.js" type="text/javascript"&gt;&lt;/script&gt;&lt;script type="text/javascript"&gt;SyntaxHighlighter.config.bloggerMode = true; SyntaxHighlighter.defaults['toolbar'] = true; SyntaxHighlighter.defaults.gutter = false; SyntaxHighlighter.all(); &lt;/script&gt;&lt;style&gt;div.syntaxhighlighter { padding: 5px; }&lt;/style&gt;</content>
      <link rel="replies" type="application/atom+xml" href="http://blog.jerryorr.com/feeds/7994955495043480461/comments/default" title="Post Comments" />
      <link rel="replies" type="text/html" href="http://blog.jerryorr.com/2013/10/using-nodejs-streams-to-massage-data.html#comment-form" title="0 Comments" />
      <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/7994955495043480461" />
      <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/7994955495043480461" />
      <link rel="alternate" type="text/html" href="http://blog.jerryorr.com/2013/10/using-nodejs-streams-to-massage-data.html" title="Using Node.js streams to massage data into the format you want" />
      <author>
         <name>Jerry Orr</name>
         <uri>http://www.blogger.com/profile/06855141821400610431</uri>
         <email>noreply@blogger.com</email>
         <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="http://2.bp.blogspot.com/-t8W_uziUTT8/To9NhZ9vqbI/AAAAAAAAAAc/5tVtYT29bwo/s220/jerry%2Bheadshot.jpg" />
      </author>
      <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/-L56A2zETw1A/UnJfQJdvz-I/AAAAAAAABxU/lthJBmR2nIE/s72-c/flu+chart+in+Dash.png" height="72" width="72" />
      <thr:total>0</thr:total>
   </entry>
   <entry>
      <id>tag:blogger.com,1999:blog-6466545174058573557.post-2761064388857214191</id>
      <published>2013-10-16T11:26:00.002-04:00</published>
      <updated>2013-10-16T11:26:28.203-04:00</updated>
      <title type="text">Cut the HealthCare.gov people some slack</title>
      <content type="html">On October 1, 2013, &lt;a href="http://healthcare.gov/" target="_blank"&gt;HealthCare.gov&lt;/a&gt;&amp;nbsp;was opened to the nation. As one of the more tangible aspects of the&amp;nbsp;Affordable Care Act (aka ACA, Obamacare), the glitches it has experienced are getting lots of negative attention. It's been described as an "&lt;a href="http://www.usatoday.com/story/opinion/2013/10/07/health-care-insurance-exchanges-obamacare-editorials-debates/2940207/" target="_blank"&gt;inexcusable mess&lt;/a&gt;"&amp;nbsp;and a "&lt;a href="http://www.businessinsider.com/frustrated-with-the-new-health-care-exchange-2013-10" target="_blank"&gt;disaster&lt;/a&gt;". I'm not going to discuss the merits of the ACA here. But as someone who spends every day building software, I think the criticisms of the HealthCare.gov application have been unfair. Here are a few reasons why we should cut them some slack.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Most webapps aren't immediately released to millions of users&lt;/h3&gt;&lt;div&gt;When Google or Facebook are releasing a new app, do you think they just flip a switch and release it to the world? Absolutely not! They slowly release it to beta testers, or add the feature to a subset of users. They encounter bugs, fix them, slowly scale up their infrastructure, and wait until they've seen it succeed before opening it up to the general public.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;HealthCare.gov, on the other hand, launched to the entire nation at once. It didn't just have to deal with traffic from thousands (hundreds of thousands? millions?) of people looking for health plans for themselves; I'm sure a lot of curious people (like myself) went there&amp;nbsp;&lt;a href="http://www.cnn.com/2013/10/15/health/obamacare-signup-issues-cohen/" target="_blank"&gt;just to check it out&lt;/a&gt;. There was no chance to work out the bugs, and no chance to gradually scale the infrastructure. This was almost guaranteed to be a problem.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Now, perhaps they &lt;i style="font-weight: bold;"&gt;should&lt;/i&gt;&amp;nbsp;have slowly rolled out the site. I suspect, however, that the reasons were political. How do you decide who gets to sign up for healthcare first? By state? By last name? Random drawing? People who signed up ahead of time? And how do you explain to everyone else that they have to wait? People expect this from Google, but a highly charged political issue like the ACA makes it dicey.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Much of what happens in the exchange is out of their control&lt;/h3&gt;&lt;div&gt;HealthCare.gov is an extremely distributed application.&amp;nbsp;John McDonough, a health policy professor at the Harvard School of Public Health, described it as:&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;"an enormously complex task. The number of systems that have to work together – federal, state, insurance companies, the Internal Revenue System – the number of systems that have to align here is pretty daunting."&lt;/blockquote&gt;If there's a bug in the IRS endpoints, there's going to be a problem. If one of the hundreds of private insurance companies' systems can't handle the increased workload, there's going to be a problem. And as someone who has built plenty of distributed systems, I know that end users don't say "oh, it must be a problem with system X that this app depends on". They think it's a problem with whatever webapp they're using, and don't care what's going on in the backend.&lt;br /&gt;&lt;br /&gt;Nor should they care. But professional IT people should know better.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Most webapps aren't serving as a referendum on a heated national controversy&lt;/h3&gt;&lt;div&gt;Frankly, there are a lot of people that want HealthCare.gov to fail primarily because they want the ACA to fail. And many people who oppose the ACA will still have a need to use HealthCare.gov. New Google apps are not typically tied to such a heated political issue, and are generally not used by people who don't want to use them.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;So let's have some empathy for the people who build HealthCare.gov&lt;/h3&gt;&lt;div&gt;This application was an enormous undertaking, with many challenges that few (if any) systems out there need to deal with. My expectation and hope is that the bugs will be worked out in the coming weeks, as happens with any new system. Whether the Affordable Care Act will be a success is yet to be seen; but the healthcare exchanges that support it were built by regular IT professionals that are just trying to do their jobs. Let's cut them some slack.&lt;/div&gt;</content>
      <link rel="replies" type="application/atom+xml" href="http://blog.jerryorr.com/feeds/2761064388857214191/comments/default" title="Post Comments" />
      <link rel="replies" type="text/html" href="http://blog.jerryorr.com/2013/10/cut-healthcaregov-people-some-slack.html#comment-form" title="9 Comments" />
      <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/2761064388857214191" />
      <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/2761064388857214191" />
      <link rel="alternate" type="text/html" href="http://blog.jerryorr.com/2013/10/cut-healthcaregov-people-some-slack.html" title="Cut the HealthCare.gov people some slack" />
      <author>
         <name>Jerry Orr</name>
         <uri>http://www.blogger.com/profile/06855141821400610431</uri>
         <email>noreply@blogger.com</email>
         <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="http://2.bp.blogspot.com/-t8W_uziUTT8/To9NhZ9vqbI/AAAAAAAAAAc/5tVtYT29bwo/s220/jerry%2Bheadshot.jpg" />
      </author>
      <thr:total>9</thr:total>
   </entry>
   <entry>
      <id>tag:blogger.com,1999:blog-6466545174058573557.post-4799642351374791260</id>
      <published>2013-03-07T13:52:00.003-05:00</published>
      <updated>2013-03-07T13:52:39.956-05:00</updated>
      <title type="text">A case for putting off documentation until the end</title>
      <content type="html">I have a bad habit of putting off documenting my code as long as possible; it's often my last task before I submit a pull request. And every time I'm slogging through hundreds or thousands of lines of code writing documentation, I think "Next time, I'm going to do this as I go along." And the next time I write a new feature, I'll probably leave the documentation until the end again.&lt;br /&gt;&lt;br /&gt;As bad as this is, though, I've realized there are a few advantages to waiting until your code is finished before writing the documentation:&lt;br /&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;Minimize wasted effort:&amp;nbsp;&lt;/b&gt;In an ideal world, your API and requirements wouldn't change after you've started coding. But how often does that happen? If you need to change your code and you've already documented it, now you have to waste time updating your documentation.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Forced self-review:&amp;nbsp;&lt;/b&gt;Have you ever written a section of code, then looked at it later and realized you could have done it better? While going back through your code to document it, you are forced to reevaluate everything you've done; the extra time between coding and documenting can sometimes give you the perspective you need to refactor it.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Catch dead code:&lt;/b&gt;&amp;nbsp;Nothing makes me want to delete unnecessary code more than having to document it. Before I document a method, I'll probably check to make sure it's actually still being used.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Consistency:&amp;nbsp;&lt;/b&gt;I find I used more consistent terminology in my documentation when I'm doing it all at once. I get in a zone, find a language I think works, and stick with it the whole way through.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Of course, there are some reasons nobody actually encourages this behavior:&lt;/div&gt;&lt;/div&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; margin-left: 1em; text-align: right;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://www.forafewmoviesmore.com/wp-content/uploads/2012/09/frodo-sam-emyn-muil.jpg" imageanchor="1" style="clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="135" src="http://www.forafewmoviesmore.com/wp-content/uploads/2012/09/frodo-sam-emyn-muil.jpg" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;One class documented... many more to go...&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;It's awful:&amp;nbsp;&lt;/b&gt;If you don't enjoy documentation (and I definitely do not), it is&amp;nbsp;&lt;i style="font-weight: bold;"&gt;really&lt;/i&gt;&amp;nbsp;painful to write it all at once. Writing the documentation every time you write a method is annoying; writing documentation for dozens of methods is brutal.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Faded memory:&amp;nbsp;&lt;/b&gt;By the time you finally write the documentation, you may have forgotten what the code does or why you made certain decisions. On the flip side, this is a good indication that you should refactor your code anyway.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Eh, forget it:&amp;nbsp;&lt;/b&gt;When faced with this monumental task, it will be very tempting to just skip the documentation, or put it on your TODO list for later. Sometimes you may be &lt;i&gt;able&lt;/i&gt;&amp;nbsp;to get away with this, but you really never &lt;i&gt;should&lt;/i&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;So I guess I'm not exactly &lt;i&gt;recommending&lt;/i&gt;&amp;nbsp;that you wait until the last minute to write your documentation. I'm just saying that there are some upsides to it. Or maybe I'm really just trying to justify my own behavior...&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content>
      <link rel="replies" type="application/atom+xml" href="http://blog.jerryorr.com/feeds/4799642351374791260/comments/default" title="Post Comments" />
      <link rel="replies" type="text/html" href="http://blog.jerryorr.com/2013/03/a-case-for-putting-off-documentation.html#comment-form" title="0 Comments" />
      <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/4799642351374791260" />
      <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/4799642351374791260" />
      <link rel="alternate" type="text/html" href="http://blog.jerryorr.com/2013/03/a-case-for-putting-off-documentation.html" title="A case for putting off documentation until the end" />
      <author>
         <name>Jerry Orr</name>
         <uri>http://www.blogger.com/profile/06855141821400610431</uri>
         <email>noreply@blogger.com</email>
         <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="http://2.bp.blogspot.com/-t8W_uziUTT8/To9NhZ9vqbI/AAAAAAAAAAc/5tVtYT29bwo/s220/jerry%2Bheadshot.jpg" />
      </author>
      <thr:total>0</thr:total>
   </entry>
   <entry>
      <id>tag:blogger.com,1999:blog-6466545174058573557.post-4139738885092104776</id>
      <published>2012-08-02T21:47:00.000-04:00</published>
      <updated>2012-08-02T22:05:04.113-04:00</updated>
      <category scheme="http://www.blogger.com/atom/ns#" term="open source software government petition" />
      <title type="text">A petition to release government-developed software to the OSS community</title>
      <content type="html">In July 2012,&amp;nbsp;&lt;a href="https://petitions.whitehouse.gov/petition/maximize-public-benefit-federal-technology-sharing-government-developed-software-under-open-source/6n5ZBBwf" target="_blank"&gt;a petition was created&lt;/a&gt;&amp;nbsp;to mandate that U.S. federal government-developed software be released to the open source community. I think this is a fantastic idea, and I'd like to elaborate on some of the points made in the petition (highlighting is mine):&lt;br /&gt;&lt;blockquote class="tr_bq" style="background-color: #eeeeee; font-style: italic; padding: 8px;"&gt;Openness: Open Sourcing ensures basic fairness and transparency by making software and related artifacts available to the &lt;b&gt;citizens who provided funding&lt;/b&gt;, consistent with the President’s 2009 declaration that “Information maintained by the Federal Government is a national asset.”&lt;/blockquote&gt;If you pay taxes in the United States, then you are paying for the software developed by the government; taxpayers can reap maximum value for their investment by releasing that software to the open source community.&lt;br /&gt;&lt;br /&gt;There's even a logical precedent for this; a "work of the United States government" &lt;a href="http://en.wikipedia.org/wiki/Copyright_status_of_work_by_the_U.S._government" target="_blank"&gt;is not entitled to copyright protection&lt;/a&gt; (essentially public domain). An excellent example is photos taken by the federal government, which are public domain and&amp;nbsp;&lt;a href="http://www.dotgovwatch.com/?/archives/8-The-Best-Copyright-Free-Photo-Libraries.html" target="_blank"&gt;freely available&lt;/a&gt;.&lt;br /&gt;&lt;blockquote class="tr_bq" style="background-color: #eeeeee; font-style: italic; padding: 8px;"&gt;Supports the Federal “Shared First” Agenda: Maximizes value to the government by significantly increasing reuse and &lt;b&gt;collaborative development between federal agencies and the private sector&lt;/b&gt;...&lt;/blockquote&gt;I think this collaboration could result in a few interesting scenarios:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Software developed by the government (which costs taxpayers a significant sum of money) could be leveraged by private sector developers, just as software developed by the private sector and then open sourced has driven so many fantastic projects. In fact, the National Security Agency has already given their&amp;nbsp;&lt;a href="https://accumulo.apache.org/" target="_blank"&gt;Accumulo&lt;/a&gt;&amp;nbsp;NoSQL database to Apache.&lt;/li&gt;&lt;li&gt;Private sector developers could actually &lt;i&gt;improve&lt;/i&gt;&amp;nbsp;the software the government has developed! Imagine what some of those sharp&amp;nbsp;&lt;a href="http://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;ved=0CFkQFjAA&amp;amp;url=http%3A%2F%2Fcode.google.com%2Fsoc%2F&amp;amp;ei=PSkbUOKgMaa36wHjs4DgBA&amp;amp;usg=AFQjCNHYqgEvTO1C4hLHRJeRalIWun65TQ" target="_blank"&gt;Google Summer of Code&lt;/a&gt;&amp;nbsp;developers could do for a summer project! That sounds to me like democracy for the 21st century.&lt;/li&gt;&lt;li&gt;Open sourcing the &lt;i&gt;software &lt;/i&gt;could be an important bridge to opening up the wealth&amp;nbsp;&lt;i&gt;data&lt;/i&gt;&amp;nbsp;our government collects. Obviously there would be privacy and security concerns, but far more data would be released if private sector developers were contributing new APIs to open sourced government software.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;What you can do&lt;/h2&gt;&lt;div&gt;The easiest thing you can do is&amp;nbsp;&lt;a href="https://petitions.whitehouse.gov/petition/maximize-public-benefit-federal-technology-sharing-government-developed-software-under-open-source/6n5ZBBwf" target="_blank"&gt;sign the petition&lt;/a&gt;&amp;nbsp;and get the word out through whatever channels you prefer (Twitter, Facebook, your own blog, whatever).&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Unfortunately, the petition needs 25,000 signatures by August 16 to receive a White House response; with less than 700 signatures as of August 2, this seems unlikely. However, &lt;i&gt;this&lt;/i&gt;&amp;nbsp;petition could just be the beginning of a movement. The more publicity it gets, the more likely it will be that the effort will take off.&lt;/div&gt;&lt;br /&gt;&lt;a href="https://twitter.com/JerryOnJava" class="twitter-follow-button" data-show-count="false"&gt;Follow @JerryOnJava&lt;/a&gt;&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");&lt;/script&gt;</content>
      <link rel="replies" type="application/atom+xml" href="http://blog.jerryorr.com/feeds/4139738885092104776/comments/default" title="Post Comments" />
      <link rel="replies" type="text/html" href="http://blog.jerryorr.com/2012/08/a-petition-to-release-government.html#comment-form" title="4 Comments" />
      <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/4139738885092104776" />
      <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/4139738885092104776" />
      <link rel="alternate" type="text/html" href="http://blog.jerryorr.com/2012/08/a-petition-to-release-government.html" title="A petition to release government-developed software to the OSS community" />
      <author>
         <name>Jerry Orr</name>
         <uri>http://www.blogger.com/profile/06855141821400610431</uri>
         <email>noreply@blogger.com</email>
         <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="http://2.bp.blogspot.com/-t8W_uziUTT8/To9NhZ9vqbI/AAAAAAAAAAc/5tVtYT29bwo/s220/jerry%2Bheadshot.jpg" />
      </author>
      <thr:total>4</thr:total>
   </entry>
   <entry>
      <id>tag:blogger.com,1999:blog-6466545174058573557.post-1710156581667876877</id>
      <published>2012-06-22T12:37:00.000-04:00</published>
      <updated>2012-06-22T12:37:47.861-04:00</updated>
      <category scheme="http://www.blogger.com/atom/ns#" term="dojo store dijit select" />
      <title type="text">Beware of Dojo Selects, Stores, and numeric IDs</title>
      <content type="html">A handy feature of &lt;a href="http://dojotoolkit.org/reference-guide/1.7/dijit/form/Select.html"&gt;Dijit Select&lt;/a&gt; (or an extending widget such as &lt;a href="http://dojotoolkit.org/reference-guide/1.7/dijit/form/FilteringSelect.html"&gt;FilteringSelect &lt;/a&gt; or &lt;a href="http://dojotoolkit.org/reference-guide/1.7/dijit/form/ComboBox.html"&gt;ComboBox&lt;/a&gt;) is the integration with &lt;a href="http://dojotoolkit.org/reference-guide/1.7/dojox/data.html"&gt;Dojo Data stores&lt;/a&gt;. You can populate your Select/FilteringSelect/ComboBox with any data that can be accessed through a Dojo Data store, including JSON REST requests, HTTP queries, CSV files, or even Wikipedia.&lt;br /&gt;&lt;br /&gt;However, there is a limitation to this that has caused me problems, even though it's documented and I've run into it a couple times: Selects do not play nicely with stores that have non-string IDs (like integers). To quote from a &lt;a href="http://dojotoolkit.org/documentation/tutorials/1.6/selects_using_stores/"&gt;Dojo tutorial&lt;/a&gt;:&lt;br /&gt;&lt;blockquote class="tr_bq" style="background-color: #cccccc; border: 2px solid #666; padding: 8px;"&gt;dijit.form.Select possesses an important limitation: it is implemented in such a way that it does not handle non-string item identities well. Particularly, setting the current value of the widget programmatically via select.set("value", id) will not work with non-string (e.g. numeric) identities.&lt;/blockquote&gt;To drive this point home, I'll give a concrete example illustrating the problem. You can also see the example in action on &lt;a href="http://dojoselectstores-site.orionhub.org:8080/dojoSelectStores/selectStoreExample.html"&gt;OrionHub &lt;/a&gt;or &lt;a href="https://www.opendrive.com/files/Nl8xODg0MTk2XzM3MlJRX2MyNjI/JerryOnJava%20-%20Dojo%20Select%20and%20Numeric%20Store.zip"&gt;download the source code&lt;/a&gt; and run it yourself.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;The goal&lt;/h2&gt;&lt;div&gt;We're going to create a pair of Selects that will display a list of ships: one backed by a store with String IDs, and one backed by a store with numeric IDs. The generated page will look like this:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-NCZfSWv8v9Y/T-PKequKMDI/AAAAAAAAACs/lt4t8ZB5YW8/s1600/Dijit+Select+Screenshot.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-NCZfSWv8v9Y/T-PKequKMDI/AAAAAAAAACs/lt4t8ZB5YW8/s1600/Dijit+Select+Screenshot.PNG" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h2&gt;The data&lt;/h2&gt;&lt;div&gt;Our store will be a &lt;a href="http://dojotoolkit.org/reference-guide/1.7/dojo/data/ItemFileReadStore.html"&gt;dojo/data/ItemFileReadStore&lt;/a&gt;, which will load JSON from a given file. The String ID JSON looks like this:&lt;/div&gt;&lt;div&gt;&lt;pre class="brush: js"&gt;{&lt;br /&gt;    "identifier": "shipId",&lt;br /&gt;    "label": "shipName",&lt;br /&gt;    "items": [&lt;br /&gt;     { "shipId": "1", "shipName": "Constitution" },&lt;br /&gt;        { "shipId": "2", "shipName": "Enterprise" }, &lt;br /&gt;        // You get the point...&lt;br /&gt;        { "shipId": "6", "shipName": "Yorktown" }&lt;br /&gt;    ]&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;And the numeric ID JSON looks like this:&lt;/div&gt;&lt;div&gt;&lt;pre class="brush: js"&gt;{&lt;br /&gt;    "identifier": "shipId",&lt;br /&gt;    "label": "shipName",&lt;br /&gt;    "items": [&lt;br /&gt;     { "shipId": 1, "shipName": "Constitution" },&lt;br /&gt;        { "shipId": 2, "shipName": "Enterprise" }, &lt;br /&gt;        // You get the point...&lt;br /&gt;        { "shipId": 6, "shipName": "Yorktown" }&lt;br /&gt;    ]&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;      The HTML&lt;/h2&gt;&lt;div&gt;The HTML is pretty uninteresting; it basically loads the JavaScript files and throws in some DIV placeholders for the widgets:&lt;/div&gt;&lt;pre class="brush: html"&gt;&amp;lt;html&amp;gt;&lt;br /&gt; &amp;lt;head&amp;gt;&lt;br /&gt;  &amp;lt;link rel="stylesheet"&lt;br /&gt;   href="http://ajax.googleapis.com/ajax/libs/dojo/1.7/dijit/themes/claro/claro.css"&amp;gt;&lt;br /&gt;  &lt;br /&gt;  &amp;lt;script src="//ajax.googleapis.com/ajax/libs/dojo/1.7.2/dojo/dojo.js"&lt;br /&gt;   data-dojo-config="async: true"&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;  &amp;lt;script src="//ajax.googleapis.com/ajax/libs/dojo/1.7.2/dijit/dijit.js"&lt;br /&gt;   data-dojo-config="async: true"&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;  &amp;lt;script src="selectStoreExample.js"&lt;br /&gt;   data-dojo-config="async: true"&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt; &amp;lt;/head&amp;gt;&lt;br /&gt; &lt;br /&gt; &amp;lt;body class="claro"&amp;gt;&lt;br /&gt;&lt;br /&gt;  &lt;br /&gt;  &amp;lt;h1&amp;gt;Using String IDs&amp;lt;/h1&amp;gt;&lt;br /&gt;  &amp;lt;div&amp;gt;&lt;br /&gt;   shipSelectString: &lt;br /&gt;   &amp;lt;div id="shipSelectString"&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;   &lt;br /&gt;   &amp;lt;div id="selectStringEnterpriseButton"&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;   &lt;br /&gt;   &amp;lt;div id="selectStringYorktownButton"&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;  &amp;lt;/div&amp;gt;&lt;br /&gt;  &lt;br /&gt;  &amp;lt;h1&amp;gt;Using Numeric IDs&amp;lt;/h1&amp;gt;&lt;br /&gt;  &amp;lt;div&amp;gt;&lt;br /&gt;   shipSelectNumber: &lt;br /&gt;   &amp;lt;div id="shipSelectNumber"&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;   &lt;br /&gt;   &amp;lt;div id="selectNumberEnterpriseButton"&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;   &lt;br /&gt;   &amp;lt;div id="selectNumberYorktownButton"&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;  &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;h2&gt;   The JavaScript&lt;/h2&gt;&lt;div&gt;Here's where all the Dijit bindings happen. For both the String and numeric ID stores, we create a Select and a couple buttons that call &lt;b&gt;select.set("value", &lt;i&gt;[the ID]&lt;/i&gt;)&lt;/b&gt;:&lt;/div&gt;&lt;pre class="brush: js"&gt;require(["dojo", "dijit", "dojo/data/ItemFileReadStore", "dijit/form/Select", &lt;br /&gt;   "dijit/form/Button", "dojo/domReady!"&lt;br /&gt;  ], function(dojo, dijit, ItemFileReadStore, Select, Button) {&lt;br /&gt; //****** Using Strings for IDs ******&lt;br /&gt; //Create the data store using a JSON file&lt;br /&gt; var shipStoreString = new ItemFileReadStore({&lt;br /&gt;  url: "ships-string.json"&lt;br /&gt; });&lt;br /&gt; &lt;br /&gt; //Create and start the Select, using the ItemFileReadStore as its store&lt;br /&gt; var selectString = new Select({&lt;br /&gt;  name: "shipSelectString",&lt;br /&gt;  store: shipStoreString&lt;br /&gt;  }, "shipSelectString");&lt;br /&gt;&lt;br /&gt; selectString.startup();&lt;br /&gt; &lt;br /&gt; //Create buttons that will use the Select widget's set() function to set the value&lt;br /&gt; new Button({&lt;br /&gt;  label: "Set shipSelectString to Enterprise",&lt;br /&gt;  onClick: function() {&lt;br /&gt;   selectString.set("value", "2");&lt;br /&gt;  }&lt;br /&gt; }, "selectStringEnterpriseButton");&lt;br /&gt; &lt;br /&gt; new Button({&lt;br /&gt;  label: "Set shipSelectString to Yorktown",&lt;br /&gt;  onClick: function() {&lt;br /&gt;   selectString.set("value", "6");&lt;br /&gt;  }&lt;br /&gt; }, "selectStringYorktownButton");&lt;br /&gt; &lt;br /&gt; //****** Using numbers for IDs ******&lt;br /&gt; //Create the data store using a JSON file&lt;br /&gt; var shipStoreNumber = new ItemFileReadStore({&lt;br /&gt;  url: "ships-number.json"&lt;br /&gt; });&lt;br /&gt; &lt;br /&gt; //Create and start the Select, using the ItemFileReadStore as its store&lt;br /&gt; var selectNumber = new Select({&lt;br /&gt;  name: "shipSelectNumber",&lt;br /&gt;  store: shipStoreNumber&lt;br /&gt;  }, "shipSelectNumber");&lt;br /&gt;&lt;br /&gt; selectNumber.startup();&lt;br /&gt; &lt;br /&gt; //Create buttons that will use the Select widget's set() function to set the value&lt;br /&gt; new Button({&lt;br /&gt;  label: "Set shipSelectNumber to Enterprise",&lt;br /&gt;  onClick: function() {&lt;br /&gt;   selectNumber.set("value", 2);&lt;br /&gt;  }&lt;br /&gt; }, "selectNumberEnterpriseButton");&lt;br /&gt; &lt;br /&gt; new Button({&lt;br /&gt;  label: "Set shipSelectNumber to Yorktown",&lt;br /&gt;  onClick: function() {&lt;br /&gt;   selectNumber.set("value", 6);&lt;br /&gt;  }&lt;br /&gt; }, "selectNumberYorktownButton");&lt;br /&gt;});&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;Now if you fire up the HTML page in your browser, you'll see the screen shown above in your browser. Click on the buttons, and you'll see that the Select with Strings as IDs changes when you click the buttons, but &lt;em&gt;nothing happens to the Select with numeric IDs&lt;/em&gt;. This is the limitation (bug?) that prevents you from using numeric IDs in a store that's backing a Select. &lt;br /&gt;&lt;br /&gt;&lt;h2&gt; Resources&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://dojotoolkit.org/documentation/tutorials/1.6/selects_using_stores/"&gt;Advanced Dijit Selects using Stores&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://dojoselectstores-site.orionhub.org:8080/dojoSelectStores/selectStoreExample.html"&gt;Running example on OrionHub &lt;/a&gt;&lt;/li&gt;&lt;li&gt; &lt;a href="https://www.opendrive.com/files/Nl8xODg0MTk2XzM3MlJRX2MyNjI/JerryOnJava%20-%20Dojo%20Select%20and%20Numeric%20Store.zip"&gt;Example source code&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;link href="http://alexgorbatchev.com/pub/sh/2.1.364/styles/shCore.css" rel="stylesheet" type="text/css"&gt;&lt;/link&gt;  &lt;link href="http://alexgorbatchev.com/pub/sh/2.1.364/styles/shThemeDefault.css" rel="stylesheet" type="text/css"&gt;&lt;/link&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shCore.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushXml.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushJScript.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script type="text/javascript"&gt;SyntaxHighlighter.config.bloggerMode = true; SyntaxHighlighter.defaults['toolbar'] = true; SyntaxHighlighter.all(); &lt;/script&gt;</content>
      <link rel="replies" type="application/atom+xml" href="http://blog.jerryorr.com/feeds/1710156581667876877/comments/default" title="Post Comments" />
      <link rel="replies" type="text/html" href="http://blog.jerryorr.com/2012/06/beware-of-dojo-selects-stores-and.html#comment-form" title="0 Comments" />
      <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/1710156581667876877" />
      <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/1710156581667876877" />
      <link rel="alternate" type="text/html" href="http://blog.jerryorr.com/2012/06/beware-of-dojo-selects-stores-and.html" title="Beware of Dojo Selects, Stores, and numeric IDs" />
      <author>
         <name>Jerry Orr</name>
         <uri>http://www.blogger.com/profile/06855141821400610431</uri>
         <email>noreply@blogger.com</email>
         <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="http://2.bp.blogspot.com/-t8W_uziUTT8/To9NhZ9vqbI/AAAAAAAAAAc/5tVtYT29bwo/s220/jerry%2Bheadshot.jpg" />
      </author>
      <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/-NCZfSWv8v9Y/T-PKequKMDI/AAAAAAAAACs/lt4t8ZB5YW8/s72-c/Dijit+Select+Screenshot.PNG" height="72" width="72" />
      <thr:total>0</thr:total>
   </entry>
   <entry>
      <id>tag:blogger.com,1999:blog-6466545174058573557.post-5508439287073363481</id>
      <published>2012-05-16T07:54:00.000-04:00</published>
      <updated>2012-05-16T14:49:57.942-04:00</updated>
      <title type="text">Secure Password Storage - Lots of don'ts, a few dos, and a concrete Java SE example</title>
      <content type="html">&lt;h2&gt;The importance of storing passwords securely&lt;/h2&gt;&lt;div&gt;As software developers, one of our most important responsibilities is the protection of our users' personal information. Without technical knowledge of our applications, users have no choice but to trust that we're fulfilling this responsibility. Sadly, when it comes to passwords, the software development community has a spotty track record.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;While it's impossible to build a 100% secure system, there are fortunately some simple steps we can take to make our users' passwords safe enough to send would-be hackers in search of easier prey.&lt;br /&gt;&lt;br /&gt;If you don't want all the background, feel free to &lt;a href="#example"&gt;skip to the Java SE example below&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;The Don'ts&lt;/h2&gt;&lt;div&gt;First, let's quickly discuss some of the things you shouldn't do when building an application that requires authentication:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Don't store authentication data unless you really have to. &lt;/b&gt;This may seem like a cop-out, but before you start building a database of user credentials, consider letting someone else handle it. If you're building a public application, consider using &lt;a href="http://oauth.net/" target="_blank"&gt;OAuth&lt;/a&gt; providers such as &lt;a href="https://developers.google.com/accounts/docs/OAuth2Login" target="_blank"&gt;Google&lt;/a&gt; or &lt;a href="https://developers.facebook.com/docs/authentication/" target="_blank"&gt;Facebook&lt;/a&gt;. If you're building an internal enterprise application, consider using any internal authentication services that may already exist, like a corporate LDAP or Kerberos service. Whether it's a public or internal application, your users will appreciate not needing to remember another user ID and password, and it's one less database out there for hackers to attack.&lt;/li&gt;&lt;li&gt;&lt;b&gt;If you must store authentication data, for Gosling's sake don't store the passwords in clear text&lt;/b&gt;. This should be obvious, but it bears mentioning. Let's at least make the hackers break a sweat.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Don't use two-way encryption unless you really need to retrieve the clear-text password.&amp;nbsp;&lt;/b&gt;You only need to know their clear-text password if you are using their credentials to interact with an external system on their behalf. Even then, you're better off having the user authenticate with that system directly.&amp;nbsp;To be clear, &lt;b&gt;you do not need to use the user's original clear-text password to perform authentication in your application&lt;/b&gt;. I'll go into more detail on this later, but when performing authentication, you will be applying an encryption algorithm to the password the user entered and comparing it to the encrypted password you've stored.&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Don't use outdated hashing algorithms like MD5&lt;/b&gt;. Honestly, hashing a password with MD5 is virtually useless. Here's an MD5-hashed password:&amp;nbsp; &lt;b&gt;569a70c2ccd0ac41c9d1637afe8cd932&lt;/b&gt;. Go to&amp;nbsp;&lt;a href="http://www.md5hacker.com/"&gt;http://www.md5hacker.com/&lt;/a&gt;&amp;nbsp;and you can decrypt it in seconds.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Don't come up with your own encryption scheme. &lt;/b&gt;There are a handful of brilliant encryption experts in the world that are capable of outwitting hackers and devising a new encryption algorithm. I am not one of them, and most likely, neither are you. If a hacker gets access to your user database, they can probably get your code too. Unless you've invented the next great successor to &lt;a href="http://en.wikipedia.org/wiki/PBKDF2" target="_blank"&gt;PBKDF2&lt;/a&gt; or &lt;a href="http://bcrypt.sourceforge.net/" target="_blank"&gt;bcrypt&lt;/a&gt;, they will be cackling maniacally as they quickly crack all your users' passwords and publish them on the &lt;a href="http://en.wikipedia.org/wiki/Darknet_(file_sharing)" target="_blank"&gt;darknet&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;The Dos&lt;/h2&gt;&lt;div&gt;Okay, enough lecturing on what not to do. Here are the things you need to focus on:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Choose a one-way encryption algorithm.&lt;/b&gt;&amp;nbsp;As I mentioned above, once you've encrypted and stored a user's password, you never need to know the real value again. When a user attempts to authenticate, you'll just apply the same algorithm to the password they entered, and compare that to the encrypted password that you stored.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Make the encryption as slow as your application can tolerate&lt;/b&gt;. Any modern password encryption algorithm should allow you to provide parameters that increase the time needed to encrypt a password (i.e. in PBKDF2, specifying the number of iterations). Why is slow good? Your users won't notice if it takes an extra 100ms to encrypt their password, but a hacker trying a brute-force attack will notice the difference as they run the algorithm billions of times.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Pick a well-known algorithm&lt;/b&gt;. The National Institute of Standards and Technology (NIST) &lt;a href="http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf" target="_blank"&gt;recommends PBKDF2&lt;/a&gt; for passwords. bcrypt is a popular and established alternative, and &lt;a href="http://www.tarsnap.com/scrypt.html" target="_blank"&gt;scrypt&lt;/a&gt; is a relatively new algorithm that has been well-received. All these are popular for a reason: they're good.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;PBKDF2&lt;/h2&gt;&lt;div&gt;Before I give show you some concrete code, let's talk a little about why PBKDF2 is a good choice for encrypting passwords:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Recommended by the NIST. &lt;/b&gt;Section 5.3 of &lt;a href="http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf" target="_blank"&gt;Special Publication 800-132&lt;/a&gt; recommends PBKDF2 for encrypting passwords. Security officials will love that.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Adjustable key stretching to defeat brute force attacks&lt;/b&gt;. The basic idea of &lt;a href="http://en.wikipedia.org/wiki/Key_stretching" target="_blank"&gt;key stretching&lt;/a&gt; is that after you apply your hashing algorithm to the password, you then continue to apply the same algorithm to the result many times (the iteration count). If hackers are trying to crack your passwords, this greatly increases the time it takes to try the billions of possible passwords. As mentioned previously, the slower, the better. PBKDF2 lets you specify the number of iterations to apply, allowing you to make it as slow as you like.&lt;/li&gt;&lt;li&gt;&lt;b&gt;A required salt to defeat rainbow table attacks and prevent collisions with other users.&lt;/b&gt;&amp;nbsp;A &lt;a href="http://en.wikipedia.org/wiki/Salt_(cryptography)" target="_blank"&gt;salt&lt;/a&gt; is a randomly generated sequence of bits that is unique to each user and is added to the user's password as part of the hashing. This prevents &lt;a href="http://en.wikipedia.org/wiki/Rainbow_table" target="_blank"&gt;rainbow table attacks&lt;/a&gt; by making a precomputed list of results unfeasible. And since each user gets their own salt, even if two users have the same password, the encrypted values will be different. There is a lot of conflicting information out there on whether the salts should be stored someplace separate from the encrypted passwords. Since the key stretching in PBKDF2 already protects us from brute-force attacks, I feel it is unnecessary to try to hide the salt. Section 3.1 of NIST SP 800-132 also defines salt as a "non-secret binary value," so that's what I go with.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Part of Java SE 6&lt;/b&gt;. No additional libraries necessary. This is particularly attractive to those working in environments with restrictive open-source policies.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;&lt;a href="http://www.blogger.com/blogger.g?blogID=6466545174058573557" name="example"&gt;&lt;/a&gt;Finally, a concrete example&lt;/h2&gt;&lt;div&gt;Okay, here's some code to encrypt passwords using PBKDF2. Only Java SE 6 is required.&lt;/div&gt;&lt;pre class="brush: java"&gt;import java.security.NoSuchAlgorithmException;&lt;br /&gt;import java.security.SecureRandom;&lt;br /&gt;import java.security.spec.InvalidKeySpecException;&lt;br /&gt;import java.security.spec.KeySpec;&lt;br /&gt;import java.util.Arrays;&lt;br /&gt;&lt;br /&gt;import javax.crypto.SecretKeyFactory;&lt;br /&gt;import javax.crypto.spec.PBEKeySpec;&lt;br /&gt;&lt;br /&gt;public class PasswordEncryptionService {&lt;br /&gt;&lt;br /&gt; public boolean authenticate(String attemptedPassword, byte[] encryptedPassword, byte[] salt)&lt;br /&gt;   throws NoSuchAlgorithmException, InvalidKeySpecException {&lt;br /&gt;  // Encrypt the clear-text password using the same salt that was used to&lt;br /&gt;  // encrypt the original password&lt;br /&gt;  byte[] encryptedAttemptedPassword = getEncryptedPassword(attemptedPassword, salt);&lt;br /&gt;&lt;br /&gt;  // Authentication succeeds if encrypted password that the user entered&lt;br /&gt;  // is equal to the stored hash&lt;br /&gt;  return Arrays.equals(encryptedPassword, encryptedAttemptedPassword);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public byte[] getEncryptedPassword(String password, byte[] salt)&lt;br /&gt;   throws NoSuchAlgorithmException, InvalidKeySpecException {&lt;br /&gt;  // PBKDF2 with SHA-1 as the hashing algorithm. Note that the NIST&lt;br /&gt;  // specifically names SHA-1 as an acceptable hashing algorithm for PBKDF2&lt;br /&gt;  String algorithm = "PBKDF2WithHmacSHA1";&lt;br /&gt;  // SHA-1 generates 160 bit hashes, so that's what makes sense here&lt;br /&gt;  int derivedKeyLength = 160;&lt;br /&gt;  // Pick an iteration count that works for you. The NIST recommends at&lt;br /&gt;  // least 1,000 iterations:&lt;br /&gt;  // http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf&lt;br /&gt;  // iOS 4.x reportedly uses 10,000:&lt;br /&gt;  // http://blog.crackpassword.com/2010/09/smartphone-forensics-cracking-blackberry-backup-passwords/&lt;br /&gt;  int iterations = 20000;&lt;br /&gt;&lt;br /&gt;  KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterations, derivedKeyLength);&lt;br /&gt;&lt;br /&gt;  SecretKeyFactory f = SecretKeyFactory.getInstance(algorithm);&lt;br /&gt;&lt;br /&gt;  return f.generateSecret(spec).getEncoded();&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public byte[] generateSalt() throws NoSuchAlgorithmException {&lt;br /&gt;  // VERY important to use SecureRandom instead of just Random&lt;br /&gt;  SecureRandom random = SecureRandom.getInstance("SHA1PRNG");&lt;br /&gt;&lt;br /&gt;  // Generate a 8 byte (64 bit) salt as recommended by RSA PKCS5&lt;br /&gt;  byte[] salt = new byte[8];&lt;br /&gt;  random.nextBytes(salt);&lt;br /&gt;&lt;br /&gt;  return salt;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The flow goes something like this:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;When adding a new user, call &lt;b&gt;generateSalt()&lt;/b&gt;, then &lt;b&gt;getEncryptedPassword()&lt;/b&gt;, and store both the encrypted password and the salt. &lt;b&gt;Do not store the clear-text password.&lt;/b&gt;&amp;nbsp;Don't worry about keeping the salt in a separate table or location from the encrypted password; as discussed above, the salt is non-secret.&lt;/li&gt;&lt;li&gt;When authenticating a user, retrieve the previously encrypted password and salt from the database, then send those and the clear-text password they entered to &lt;b&gt;authenticate()&lt;/b&gt;. If it returns true, authentication succeeded.&lt;/li&gt;&lt;li&gt;When a user changes their password, it's safe to reuse their old salt; you can just call &lt;b&gt;getEncryptedPassword() &lt;/b&gt;with the old salt.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Easy enough, right? If you're building or maintaining an application that violates any of the "don'ts" above, then &lt;i&gt;please&lt;/i&gt; do your users a favor and use something like PBKDF2 or bcrypt. Help them, Obi-Wan Developer, you're their only hope. &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;References&lt;/h2&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;NIST:&amp;nbsp;&lt;a href="http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf" target="_blank"&gt;Special Publication 800-132&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Wikipedia:&amp;nbsp;&lt;a href="http://en.wikipedia.org/wiki/PBKDF2" target="_blank"&gt;PBKDF2&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Wikipedia:&amp;nbsp;&lt;a href="http://en.wikipedia.org/wiki/Key_stretching" target="_blank"&gt;Key Stretching&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Wikipedia:&amp;nbsp;&lt;a href="http://en.wikipedia.org/wiki/Salt_(cryptography)" target="_blank"&gt;Salt (cryptography)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Wikipedia:&amp;nbsp;&lt;a href="http://en.wikipedia.org/wiki/Rainbow_table" target="_blank"&gt;Rainbow Table Attacks&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Vladimir Katalov:&amp;nbsp;&lt;a href="http://blog.crackpassword.com/2010/09/smartphone-forensics-cracking-blackberry-backup-passwords/" target="_blank"&gt;Smartphone Forensics: Cracking BlackBerry Backup Passwords &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;link href="http://alexgorbatchev.com/pub/sh/2.1.364/styles/shCore.css" rel="stylesheet" type="text/css"&gt;&lt;/link&gt;  &lt;link href="http://alexgorbatchev.com/pub/sh/2.1.364/styles/shThemeDefault.css" rel="stylesheet" type="text/css"&gt;&lt;/link&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shCore.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushXml.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushCss.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushJava.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushPhp.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushJScript.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script type="text/javascript"&gt;SyntaxHighlighter.config.bloggerMode = true; SyntaxHighlighter.defaults['toolbar'] = true; SyntaxHighlighter.all(); &lt;/script&gt;</content>
      <link rel="replies" type="application/atom+xml" href="http://blog.jerryorr.com/feeds/5508439287073363481/comments/default" title="Post Comments" />
      <link rel="replies" type="text/html" href="http://blog.jerryorr.com/2012/05/secure-password-storage-lots-of-donts.html#comment-form" title="14 Comments" />
      <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/5508439287073363481" />
      <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/5508439287073363481" />
      <link rel="alternate" type="text/html" href="http://blog.jerryorr.com/2012/05/secure-password-storage-lots-of-donts.html" title="Secure Password Storage - Lots of don'ts, a few dos, and a concrete Java SE example" />
      <author>
         <name>Jerry Orr</name>
         <uri>http://www.blogger.com/profile/06855141821400610431</uri>
         <email>noreply@blogger.com</email>
         <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="http://2.bp.blogspot.com/-t8W_uziUTT8/To9NhZ9vqbI/AAAAAAAAAAc/5tVtYT29bwo/s220/jerry%2Bheadshot.jpg" />
      </author>
      <thr:total>14</thr:total>
   </entry>
   <entry>
      <id>tag:blogger.com,1999:blog-6466545174058573557.post-4094622697248359779</id>
      <published>2012-01-16T22:19:00.000-05:00</published>
      <updated>2012-01-16T22:19:11.139-05:00</updated>
      <title type="text">JSF and the "immediate" Attribute - Command Components</title>
      <content type="html">The &lt;b&gt;immediate &lt;/b&gt;attribute in JSF is commonly misunderstood. If you don't believe me, check out &lt;a href="http://stackoverflow.com/search?q=jsf+immediate"&gt;Stack Overflow&lt;/a&gt;. Part of the confusion is likely due to &lt;b&gt;immediate &lt;/b&gt;being available on both input (i.e.. &amp;lt;h:inputText /&amp;gt;) and command (i.e.  &amp;lt;h:commandButton /&amp;gt;) components, each of which affects the JSF lifecycle differently.&lt;br /&gt;&lt;br /&gt;Here is the standard JSF lifecycle:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-tUegcTiR79g/TxSF6PySy_I/AAAAAAAAABY/M3BZvD6o1SU/s1600/JSF+Lifecycle+-+Standard.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-tUegcTiR79g/TxSF6PySy_I/AAAAAAAAABY/M3BZvD6o1SU/s1600/JSF+Lifecycle+-+Standard.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;For the purposes of this article, I'll assume you are familiar with the basics of the JSF lifecycle. If you need an introduction or a memory refresher, check out the &lt;a href="http://docs.oracle.com/javaee/6/tutorial/doc/bnaqq.html"&gt;Java EE 6 Tutorial - The Lifecycle of a JavaServer Faces Application&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;Note: the code examples in this article are for JSF 2 (Java EE 6), but the principals are the same for JSF 1.2 (Java EE 5).&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;immediate=true on Command components&lt;/h2&gt;In the &lt;i&gt;standard&lt;/i&gt; JSF lifecycle, the action attribute on an Command component is evaluated in the &lt;b&gt;Invoke Application&lt;/b&gt; phase. For example, say we have a &lt;b&gt;User &lt;/b&gt;entity/bean:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: java"&gt;public class User implements Serializable {&lt;br /&gt;&lt;br /&gt; @NotBlank&lt;br /&gt; @Length(max = 50)&lt;br /&gt; private String firstName;&lt;br /&gt;&lt;br /&gt; @NotBlank&lt;br /&gt; @Length(max = 50)&lt;br /&gt; private String lastName;&lt;br /&gt;&lt;br /&gt; /* Snip constructors, getters/setters, a nice toString() method, etc */&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;And a &lt;b&gt;UserManager &lt;/b&gt;to serve as our managed bean:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: java"&gt;@SessionScoped&lt;br /&gt;@ManagedBean&lt;br /&gt;public class UserManager {&lt;br /&gt; private User newUser;&lt;br /&gt;&lt;br /&gt; /* Snip some general page logic... */&lt;br /&gt;&lt;br /&gt; public String addUser() {&lt;br /&gt;  //Snip logic to persist newUser&lt;br /&gt;&lt;br /&gt;  FacesContext.getCurrentInstance().addMessage(null,&lt;br /&gt;    new FacesMessage("User " + newUser.toString() + " added"));&lt;br /&gt;&lt;br /&gt;  return "/home.xhtml";&lt;br /&gt; }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;And a basic Facelets page, &lt;b&gt;newUser.xhtml&lt;/b&gt;, to render the view:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: xml"&gt;&amp;lt;h:form&amp;gt;&lt;br /&gt; &amp;lt;h:panelGrid columns="2"&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;h:outputText value="First Name: " /&amp;gt;&lt;br /&gt;  &amp;lt;h:panelGroup&amp;gt;&lt;br /&gt;   &amp;lt;h:inputText id="firstName"&lt;br /&gt;    value="#{userManager.newUser.firstName}" /&amp;gt;&lt;br /&gt;   &amp;lt;h:message for="firstName" /&amp;gt;&lt;br /&gt;  &amp;lt;/h:panelGroup&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;h:outputText value="Last Name: " /&amp;gt;&lt;br /&gt;  &amp;lt;h:panelGroup&amp;gt;&lt;br /&gt;   &amp;lt;h:inputText id="lastName" value="#{userManager.newUser.lastName}" /&amp;gt;&lt;br /&gt;   &amp;lt;h:message for="lastName" /&amp;gt;&lt;br /&gt;  &amp;lt;/h:panelGroup&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;/h:panelGrid&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;h:commandButton value="Add User" action="#{userManager.addUser()}" /&amp;gt;&lt;br /&gt;&amp;lt;/h:form&amp;gt;&lt;/pre&gt;&lt;br /&gt;Which all combine to produce this lovely form:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-DTJ2ovC-0mY/TxTdwtI6WFI/AAAAAAAAABk/hmDJGYo_F6E/s1600/Form%2Bscreenshot%2B-%2Bbasic.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="133" src="http://3.bp.blogspot.com/-DTJ2ovC-0mY/TxTdwtI6WFI/AAAAAAAAABk/hmDJGYo_F6E/s320/Form%2Bscreenshot%2B-%2Bbasic.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;When the user clicks on the &lt;b&gt;Add User&lt;/b&gt; button, &lt;b&gt;#{userManager.addUser}&lt;/b&gt; will be called in the &lt;b&gt;Invoke Application&lt;/b&gt; phase; this makes sense, because we want the input fields to be validated, converted, and applied to newUser before it is persisted.&lt;br /&gt;&lt;br /&gt;Now let's add a "cancel" button to the page, in case the user changes his/her mind. We'll add another &amp;lt;h:commandButton /&amp;gt; to the page:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: xml"&gt;&amp;lt;h:form&amp;gt;&lt;br /&gt; &amp;lt;!-- Snip Input components --&amp;gt; &lt;br /&gt;&lt;br /&gt; &amp;lt;h:commandButton value="Add User" action="#{userManager.addUser()}" /&amp;gt;&lt;br /&gt; &amp;lt;h:commandButton value="Cancel" action="#{userManager.cancel()}" /&amp;gt;&lt;br /&gt;&amp;lt;/h:form&amp;gt;&lt;/pre&gt;&lt;br /&gt;And the &lt;b&gt;cancel()&lt;/b&gt; method to &lt;b&gt;UserManager&lt;/b&gt;:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: java"&gt;public String cancel() {&lt;br /&gt; newUser = new User();&lt;br /&gt;&lt;br /&gt; FacesContext.getCurrentInstance().addMessage(null,&lt;br /&gt;   new FacesMessage("Cancelled new user"));&lt;br /&gt;&lt;br /&gt; return "/home.xhtml";&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;Looks good, right? But when we actually try to use the cancel button, we get errors complaining that first and last name are required:&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-abaU_Y-_nDA/TxTg7bEB1xI/AAAAAAAAABw/CvLFCgQAlG8/s1600/JSF%2BLifecycle%2B-%2BCancel%2Bwithout%2Bimmediate.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="123" src="http://1.bp.blogspot.com/-abaU_Y-_nDA/TxTg7bEB1xI/AAAAAAAAABw/CvLFCgQAlG8/s320/JSF%2BLifecycle%2B-%2BCancel%2Bwithout%2Bimmediate.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;This is because &lt;b&gt;#{userManager.cancel}&lt;/b&gt; isn't called until the &lt;b&gt;Invoke Application&lt;/b&gt; phase, which occurs &lt;i&gt;after &lt;/i&gt;the &lt;b&gt;Process Validations&lt;/b&gt; phase; since we didn't enter a first and last name, the validations failed before &lt;b&gt;#{userManager.cancel}&lt;/b&gt; is called, and the response is rendered after the &lt;b&gt;Process Validations&lt;/b&gt; phase.&lt;br /&gt;&lt;br /&gt;We certainly don't want to require the end user to enter a valid user before cancelling! Fortunately, JSF provides the &lt;b&gt;immediate &lt;/b&gt;attribute on Command components. When &lt;b&gt;immediate &lt;/b&gt;is set to true on an Command component, the action is invoked in the &lt;b&gt;Apply Request Values&lt;/b&gt; phase:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-BmvXqIihfVk/TxTi-MXzPcI/AAAAAAAAAB8/SF3LlW4W7hA/s1600/JSF%2BLifecycle%2B-%2BImmediate%2Bon%2BCommand%2BComponent.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-BmvXqIihfVk/TxTi-MXzPcI/AAAAAAAAAB8/SF3LlW4W7hA/s1600/JSF%2BLifecycle%2B-%2BImmediate%2Bon%2BCommand%2BComponent.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;This is perfect for our Cancel use case. If we add &lt;b&gt;immediate=true&lt;/b&gt; to the Cancel &lt;h:commandbutton&gt;, &lt;b&gt;#{userManager.cancel}&lt;/b&gt; will be called in the &lt;b&gt;Apply Request Values&lt;/b&gt; phase, before any validation occurs. &lt;br /&gt;&lt;br /&gt;&lt;/h:commandbutton&gt;&lt;br /&gt;&lt;pre class="brush: xml"&gt;&amp;lt;h:form&amp;gt;  &lt;br /&gt; &amp;lt;!-- Snip Input components --&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;h:commandButton value="Add User" action="#{userManager.addUser()}" /&amp;gt;&lt;br /&gt; &amp;lt;h:commandButton value="Cancel" action="#{userManager.cancel()}" immediate="true" /&amp;gt;&lt;br /&gt;&amp;lt;/h:form&amp;gt;&lt;/pre&gt;&lt;br /&gt;So now when we click cancel, &lt;b&gt;#{userManager.cancel}&lt;/b&gt; is called in the &lt;b&gt;Apply Request Values&lt;/b&gt; phase, and we are directed back to the home page with the expected cancellation message; no validation errors!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-7wOBgPFxMNw/TxTlhs4_8TI/AAAAAAAAACI/DGr2M9AuOXY/s1600/Form%2Bscreenshot%2B-%2Bimmediate%2Bon%2Bcancel%2Bbutton.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://4.bp.blogspot.com/-7wOBgPFxMNw/TxTlhs4_8TI/AAAAAAAAACI/DGr2M9AuOXY/s1600/Form%2Bscreenshot%2B-%2Bimmediate%2Bon%2Bcancel%2Bbutton.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h2&gt;What about Input components?&lt;/h2&gt;Input components have the &lt;b&gt;immediate&lt;/b&gt; attribute as well, which also moves all their logic into the &lt;b&gt;Apply Request Values&lt;/b&gt; phase. However, the behavior is slightly different from Command components, especially depending on whether or not the validation on the Input component succeeds. My next article will address &lt;b&gt;immediate=true&lt;/b&gt; on Input components. For now, here's a preview of how the JSF lifecycle is affected:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-g3yLdwJTo-s/TxTnPglyQQI/AAAAAAAAACU/AW4wGkQ6Q4s/s1600/JSF%2BLifecycle%2B-%2BImmediate%2Bon%2BInput%2BComponent%2B-%2Bno%2Berrors.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-g3yLdwJTo-s/TxTnPglyQQI/AAAAAAAAACU/AW4wGkQ6Q4s/s1600/JSF%2BLifecycle%2B-%2BImmediate%2Bon%2BInput%2BComponent%2B-%2Bno%2Berrors.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-_XucwFsCPAI/TxTnV1a9UGI/AAAAAAAAACg/l9dlh6weXgU/s1600/JSF%2BLifecycle%2B-%2BImmediate%2Bon%2BInput%2BComponent%2B-%2Bwith%2Berrors.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-_XucwFsCPAI/TxTnV1a9UGI/AAAAAAAAACg/l9dlh6weXgU/s1600/JSF%2BLifecycle%2B-%2BImmediate%2Bon%2BInput%2BComponent%2B-%2Bwith%2Berrors.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;link href="http://alexgorbatchev.com/pub/sh/2.1.364/styles/shCore.css" rel="stylesheet" type="text/css"&gt;&lt;/link&gt;  &lt;link href="http://alexgorbatchev.com/pub/sh/2.1.364/styles/shThemeDefault.css" rel="stylesheet" type="text/css"&gt;&lt;/link&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shCore.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushXml.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushCss.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushJava.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushPhp.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushJScript.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script type="text/javascript"&gt;SyntaxHighlighter.config.bloggerMode = true; SyntaxHighlighter.defaults['toolbar'] = true; SyntaxHighlighter.all(); &lt;/script&gt;</content>
      <link rel="replies" type="application/atom+xml" href="http://blog.jerryorr.com/feeds/4094622697248359779/comments/default" title="Post Comments" />
      <link rel="replies" type="text/html" href="http://blog.jerryorr.com/2012/01/jsf-and-immediate-attribute-command.html#comment-form" title="2 Comments" />
      <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/4094622697248359779" />
      <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/4094622697248359779" />
      <link rel="alternate" type="text/html" href="http://blog.jerryorr.com/2012/01/jsf-and-immediate-attribute-command.html" title="JSF and the &quot;immediate&quot; Attribute - Command Components" />
      <author>
         <name>Jerry Orr</name>
         <uri>http://www.blogger.com/profile/06855141821400610431</uri>
         <email>noreply@blogger.com</email>
         <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="http://2.bp.blogspot.com/-t8W_uziUTT8/To9NhZ9vqbI/AAAAAAAAAAc/5tVtYT29bwo/s220/jerry%2Bheadshot.jpg" />
      </author>
      <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/-tUegcTiR79g/TxSF6PySy_I/AAAAAAAAABY/M3BZvD6o1SU/s72-c/JSF+Lifecycle+-+Standard.png" height="72" width="72" />
      <thr:total>2</thr:total>
   </entry>
   <entry>
      <id>tag:blogger.com,1999:blog-6466545174058573557.post-7677771231783763500</id>
      <published>2011-10-13T15:27:00.000-04:00</published>
      <updated>2012-01-16T22:18:13.755-05:00</updated>
      <title type="text">Replacement for s:decorate in Seam 3</title>
      <content type="html">I've been doing a gap analysis for our migration from Seam 2 to Seam 3, and I was dismayed to find that the &amp;lt;s:decorate&amp;gt; tag is gone! In Seam 2, you create a template like this:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: xml"&gt;&amp;lt;ui:composition  xmlns="http://www.w3.org/1999/xhtml"&lt;br /&gt;                 xmlns:ui="http://java.sun.com/jsf/facelets"&lt;br /&gt;                 xmlns:h="http://java.sun.com/jsf/html"&lt;br /&gt;                 xmlns:f="http://java.sun.com/jsf/core"&lt;br /&gt;                 xmlns:s="http://jboss.com/products/seam/taglib"&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;div class="prop"&amp;gt;&lt;br /&gt;        &amp;lt;s:label styleClass="nameEdit #{invalid?'errors':''}"&amp;gt;&lt;br /&gt;            &amp;lt;s:span styleClass="required"&lt;br /&gt;               rendered="#{required}"&amp;gt;*&amp;lt;/s:span&amp;gt;&lt;br /&gt;            &amp;lt;ui:insert name="label"/&amp;gt;&lt;br /&gt;        &amp;lt;/s:label&amp;gt;&lt;br /&gt;&lt;br /&gt;        &amp;lt;span class="value #{invalid?'errors':''}"&amp;gt;&lt;br /&gt;            &amp;lt;s:validateAll&amp;gt;&lt;br /&gt;                &amp;lt;ui:insert/&amp;gt;&lt;br /&gt;            &amp;lt;/s:validateAll&amp;gt;&lt;br /&gt;        &amp;lt;/span&amp;gt;&lt;br /&gt;&lt;br /&gt;        &amp;lt;span class="error"&amp;gt;&lt;br /&gt;            &amp;lt;h:graphicImage value="/img/error.gif" &lt;br /&gt;                rendered="#{invalid}" styleClass="errors"/&amp;gt;&lt;br /&gt;        &amp;lt;/span&amp;gt;&lt;br /&gt;    &amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;/ui:composition&amp;gt;&lt;/pre&gt;&lt;br /&gt;And then reference it using &amp;lt;s:decorate&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: xml"&gt;&amp;lt;s:decorate template="edit.xhtml"&amp;gt;&lt;br /&gt;  &amp;lt;ui:define name="label"&amp;gt;Country:&amp;lt;/ui:define&amp;gt;&lt;br /&gt;  &amp;lt;h:inputText value="#{location.country}" required="true"/&amp;gt;&lt;br /&gt;&amp;lt;/s:decorate&amp;gt;&lt;/pre&gt;&lt;br /&gt;And now required fields are noted with an asterisk (*), all fields are automatically validated, and when they have errors, a special style is applied and the error message appears to the right of the field:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-mpSPSfJqBr4/Tpc4K2fzrfI/AAAAAAAAABA/XYXotZPhU98/s1600/decorate%2Bscreenshot.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://4.bp.blogspot.com/-mpSPSfJqBr4/Tpc4K2fzrfI/AAAAAAAAABA/XYXotZPhU98/s320/decorate%2Bscreenshot.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;i&gt;Note: this is all documented in &lt;a href="http://docs.jboss.org/seam/2.2.2.Final/reference/en-US/html_single/#d0e29026"&gt;Section 33.1.13 of the Seam 2 reference&lt;/a&gt;&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;Pretty slick! I definitely need this functionality when I migrate to Seam 3, but the &amp;lt;s:decorate&amp;gt; tag is gone, and I had a hard time finding a replacement.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Replacing with UIInputContainer&lt;/h2&gt;Fortunately, a close replacement actually exists in Seam 3's Faces module... it just isn't described as such! Seam Faces provides a component called &lt;a href="http://docs.jboss.org/seam/3/faces/latest/reference/en-US/html/components.html#UIInputContainer"&gt;UIInputContainer&lt;/a&gt;. When this is combined with a JSF 2 composite component, you can get the same functionality.&lt;br /&gt;&lt;br /&gt;First, create your composite component. I created mine at &lt;b&gt;WebContent/resources/orr/decorate.xhtml&lt;/b&gt;:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: xml"&gt;&amp;lt;?xml version="1.0"?&amp;gt;&lt;br /&gt;&amp;lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"&lt;br /&gt;    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&amp;gt;&lt;br /&gt;&amp;lt;html xmlns="http://www.w3.org/1999/xhtml"&lt;br /&gt; xmlns:h="http://java.sun.com/jsf/html"&lt;br /&gt; xmlns:composite="http://java.sun.com/jsf/composite"&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;composite:interface componentType="org.jboss.seam.faces.InputContainer" /&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;composite:implementation&amp;gt;&lt;br /&gt; &amp;lt;div&amp;gt;&lt;br /&gt;  &amp;lt;h:outputLabel id="label" value="#{cc.attrs.label}:"&lt;br /&gt;   styleClass="#{cc.attrs.invalid ? 'invalid' : ''}"&amp;gt;&lt;br /&gt;&lt;br /&gt;   &amp;lt;h:outputText styleClass="required" rendered="#{cc.attrs.required}"&lt;br /&gt;    value="*" /&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;/h:outputLabel&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;!-- h:panelGroup is a workaround for a JSF bug, see http://java.net/jira/browse/JAVASERVERFACES-1991  --&amp;gt;&lt;br /&gt;  &amp;lt;h:panelGroup styleClass="value #{invalid?'errors':''}" &amp;gt;&lt;br /&gt;   &amp;lt;composite:insertChildren /&amp;gt;&lt;br /&gt;  &amp;lt;/h:panelGroup&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;h:message id="message" errorClass="invalid message"&lt;br /&gt;   rendered="#{cc.attrs.invalid}" /&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;/composite:implementation&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Since I put the composite component in &lt;b&gt;WebContent/resources/orr/decorate.xhtml&lt;/b&gt;, the namespace is &lt;b&gt;http://java.sun.com/jsf/composite/&lt;i&gt;orr&lt;/i&gt;&lt;/b&gt; and the tag name is &lt;b&gt;decorate&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;Now use this new tag in your Facelets page:&lt;br /&gt;&lt;pre class="brush: xml"&gt;&amp;lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&amp;gt;&lt;br /&gt;&amp;lt;html xmlns="http://www.w3.org/1999/xhtml"&lt;br /&gt; xmlns:h="http://java.sun.com/jsf/html"&lt;br /&gt; xmlns:f="http://java.sun.com/jsf/core"&lt;br /&gt; xmlns:o="http://java.sun.com/jsf/composite/orr"&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;o:decorate label="Country:"&amp;gt;&lt;br /&gt;    &amp;lt;h:inputText value="#{location.country}" required="true"/&amp;gt;&lt;br /&gt;&amp;lt;/o:decorate&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;And that's it! This will generate roughly the same output and behavior as Seam 2's &amp;lt;s:decorate&amp;gt; tag. So all along, there was a pretty good replacement, but either this wasn't made clear anywhere, or my Google skills aren't quite as good as I think. I imagine this would be documented in JBoss's Seam 2 to Seam 3 migration guide, if such a thing existed...&lt;br /&gt;&lt;br /&gt;&lt;link href="http://alexgorbatchev.com/pub/sh/2.1.364/styles/shCore.css" rel="stylesheet" type="text/css"&gt;&lt;/link&gt;  &lt;link href="http://alexgorbatchev.com/pub/sh/2.1.364/styles/shThemeDefault.css" rel="stylesheet" type="text/css"&gt;&lt;/link&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shCore.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushXml.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushCss.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushJava.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushPhp.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushJScript.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script type="text/javascript"&gt;SyntaxHighlighter.config.bloggerMode = true; SyntaxHighlighter.defaults['toolbar'] = true; SyntaxHighlighter.all(); &lt;/script&gt;</content>
      <link rel="replies" type="application/atom+xml" href="http://blog.jerryorr.com/feeds/7677771231783763500/comments/default" title="Post Comments" />
      <link rel="replies" type="text/html" href="http://blog.jerryorr.com/2011/10/replacement-for-sdecorate-in-seam-3.html#comment-form" title="5 Comments" />
      <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/7677771231783763500" />
      <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/7677771231783763500" />
      <link rel="alternate" type="text/html" href="http://blog.jerryorr.com/2011/10/replacement-for-sdecorate-in-seam-3.html" title="Replacement for s:decorate in Seam 3" />
      <author>
         <name>Jerry Orr</name>
         <uri>http://www.blogger.com/profile/06855141821400610431</uri>
         <email>noreply@blogger.com</email>
         <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="http://2.bp.blogspot.com/-t8W_uziUTT8/To9NhZ9vqbI/AAAAAAAAAAc/5tVtYT29bwo/s220/jerry%2Bheadshot.jpg" />
      </author>
      <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://4.bp.blogspot.com/-mpSPSfJqBr4/Tpc4K2fzrfI/AAAAAAAAABA/XYXotZPhU98/s72-c/decorate%2Bscreenshot.png" height="72" width="72" />
      <thr:total>5</thr:total>
   </entry>
   <entry>
      <id>tag:blogger.com,1999:blog-6466545174058573557.post-3711433175506204301</id>
      <published>2011-10-07T14:46:00.000-04:00</published>
      <updated>2011-10-07T15:00:57.771-04:00</updated>
      <category scheme="http://www.blogger.com/atom/ns#" term="jsf facelets custom converter attributes" />
      <title type="text">Creating a JSF 1.2 Custom Converter with Attributes</title>
      <content type="html">Custom converters are a very important part of many JSF applications. Writing and using a basic converter is quite simple if it has no attributes:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: xml"&gt;&amp;lt;h:outputText value="#{somePhoneNumber}" &lt;br /&gt;  converter="myPhoneNumberConverter" /&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;However, things get a little trickier when you need to provide attributes to your converter. For example, Facelets includes a date/time converter:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: xml"&gt;&amp;lt;h:outputText value="#{someDate}"&amp;gt;&lt;br /&gt;  &amp;lt;f:convertDateTime type="both" dateStyle="short"/&amp;gt;&lt;br /&gt;&amp;lt;/h:outputText&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;While there are many resources out there on creating basic custom converters, I had difficulty finding a good explanation of how to create custom converters with attributes. Here are the steps I followed:&lt;br /&gt;&lt;br /&gt;&lt;i&gt;Note: I built this using Seam 2.2 on JBoss EAP 5.1, but this should work for any JSF 1.2 application using Facelets.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;The USAPhoneNumber class&lt;/h2&gt;We'll be creating a converter for a class called USAPhoneNumber. There's nothing special about this class, just a POJO with an attribute for each "part" of a US phone number.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: java"&gt;package org.orr.customconverter;&lt;br /&gt;&lt;br /&gt;import java.io.Serializable;&lt;br /&gt;&lt;br /&gt;public class USAPhoneNumber implements Serializable {&lt;br /&gt; private static final long serialVersionUID = 1L;&lt;br /&gt;&lt;br /&gt; private String areaCode;&lt;br /&gt; private String prefix;&lt;br /&gt; private String lineNumber;&lt;br /&gt; private String extension;&lt;br /&gt;&lt;br /&gt; public USAPhoneNumber(String areaCode, String prefix, String lineNumber,&lt;br /&gt;   String extension) {&lt;br /&gt;  super();&lt;br /&gt;  this.areaCode = areaCode;&lt;br /&gt;  this.prefix = prefix;&lt;br /&gt;  this.lineNumber = lineNumber;&lt;br /&gt;  this.extension = extension;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public USAPhoneNumber(String areaCode, String prefix, String lineNumber) {&lt;br /&gt;  super();&lt;br /&gt;  this.areaCode = areaCode;&lt;br /&gt;  this.prefix = prefix;&lt;br /&gt;  this.lineNumber = lineNumber;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public String getAreaCode() {&lt;br /&gt;  return areaCode;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public String getPrefix() {&lt;br /&gt;  return prefix;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public String getLineNumber() {&lt;br /&gt;  return lineNumber;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public String getExtension() {&lt;br /&gt;  return extension;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public String toString() {&lt;br /&gt;  String tmp = areaCode + "-" + prefix + "-" + lineNumber;&lt;br /&gt;  if (extension != null &amp;amp;&amp;amp; extension.length() &amp;gt; 0)&lt;br /&gt;   tmp += " x" + extension;&lt;br /&gt;&lt;br /&gt;  return tmp;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;h2&gt;Create a Converter class&lt;/h2&gt;First we'll create an implementation of &lt;b&gt;javax.faces.convert.Converter&lt;/b&gt;. We might want the ability to convert it into a few different styles, such as 212-555-7456, (212) 555-7456, 212 555 7456, etc. To support this, we are creating an attribute called &lt;b&gt;style&lt;/b&gt;, which will accept values like &lt;b&gt;parentheses&lt;/b&gt;, &lt;b&gt;dashes&lt;/b&gt;, and &lt;b&gt;spaces&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: java"&gt;package org.orr.customconverter;&lt;br /&gt;&lt;br /&gt;import java.io.Serializable;&lt;br /&gt;&lt;br /&gt;import javax.faces.application.FacesMessage;&lt;br /&gt;import javax.faces.component.UIComponent;&lt;br /&gt;import javax.faces.context.FacesContext;&lt;br /&gt;import javax.faces.convert.Converter;&lt;br /&gt;import javax.faces.convert.ConverterException;&lt;br /&gt;&lt;br /&gt;public class PhoneNumberConverter implements Converter, Serializable {&lt;br /&gt; private static final long serialVersionUID = 1L;&lt;br /&gt;&lt;br /&gt; private String style;&lt;br /&gt;&lt;br /&gt; private static final Style DEFAULT_STYLE = Style.DASHES;&lt;br /&gt;&lt;br /&gt; private enum Style {&lt;br /&gt;  DASHES, SPACES, PARENTHESES&lt;br /&gt; };&lt;br /&gt;&lt;br /&gt; public Object getAsObject(FacesContext context, UIComponent component,&lt;br /&gt;   String stringValue) {&lt;br /&gt;&lt;br /&gt;  if (stringValue == null || stringValue.trim().length() == 0)&lt;br /&gt;   return null;&lt;br /&gt;&lt;br /&gt;  // We COULD try to read in the value based on the style, but in this&lt;br /&gt;  // case, it's easiest to just strip out all non-numeric characters and&lt;br /&gt;  // require that the number be greater than 10 digits, with any digits&lt;br /&gt;  // past 10 becoming the extension&lt;br /&gt;  String rawNumber = stringValue.replaceAll("[^0-9]", "");&lt;br /&gt;&lt;br /&gt;  USAPhoneNumber number = null;&lt;br /&gt;&lt;br /&gt;  if (rawNumber.length() &amp;lt; 10)&lt;br /&gt;   throw new ConverterException(new FacesMessage(&lt;br /&gt;     "Phone number must have at least 10 numeric characters"));&lt;br /&gt;  else if (rawNumber.length() == 10)&lt;br /&gt;   number = new USAPhoneNumber(rawNumber.substring(0, 3),&lt;br /&gt;     rawNumber.substring(3, 6), rawNumber.substring(6));&lt;br /&gt;  else&lt;br /&gt;   number = new USAPhoneNumber(rawNumber.substring(0, 3),&lt;br /&gt;     rawNumber.substring(3, 6), rawNumber.substring(6, 10),&lt;br /&gt;     rawNumber.substring(10));&lt;br /&gt;&lt;br /&gt;  return number;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public String getAsString(FacesContext context, UIComponent component,&lt;br /&gt;   Object value) {&lt;br /&gt;  USAPhoneNumber number = (USAPhoneNumber) value;&lt;br /&gt;&lt;br /&gt;  if (number == null)&lt;br /&gt;   return "";&lt;br /&gt;&lt;br /&gt;  String stringValue = null;&lt;br /&gt;&lt;br /&gt;  Style styleEnum = style == null ? DEFAULT_STYLE : Style.valueOf(style&lt;br /&gt;    .toUpperCase());&lt;br /&gt;&lt;br /&gt;  switch (styleEnum) {&lt;br /&gt;  case DASHES:&lt;br /&gt;   stringValue = number.getAreaCode() + "-" + number.getPrefix() + "-"&lt;br /&gt;     + number.getLineNumber() + getFormattedExtension(number);&lt;br /&gt;   break;&lt;br /&gt;  case SPACES:&lt;br /&gt;   stringValue = number.getAreaCode() + " " + number.getPrefix() + " "&lt;br /&gt;     + number.getLineNumber() + getFormattedExtension(number);&lt;br /&gt;   break;&lt;br /&gt;  case PARENTHESES:&lt;br /&gt;   stringValue = "(" + number.getAreaCode() + ") "&lt;br /&gt;     + number.getPrefix() + "-" + number.getLineNumber()&lt;br /&gt;     + getFormattedExtension(number);&lt;br /&gt;   break;&lt;br /&gt;  default:&lt;br /&gt;   throw new ConverterException(new FacesMessage("Unsupported style: "&lt;br /&gt;     + style));&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  return stringValue;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; private String getFormattedExtension(USAPhoneNumber number) {&lt;br /&gt;  if (number.getExtension() == null)&lt;br /&gt;   return "";&lt;br /&gt;  else&lt;br /&gt;   return " x" + number.getExtension();&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public String getStyle() {&lt;br /&gt;  return style;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void setStyle(String style) {&lt;br /&gt;  this.style = style;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;If you've written a JSF converter before, this will look pretty familiar. However, there are a few things to note:  &lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;You must implement java.io.Serializable.&lt;/b&gt; After the RENDER RESPONSE phase, JSF serializes the view; in the RENDER RESPONSE phase, it deserializes it. If your converter does not implement Serializable, the attribute(s) (&lt;b&gt;style&lt;/b&gt; in this example) will be lost.&lt;/li&gt;&lt;li&gt;&lt;b&gt;You must not make your converter a Seam component&lt;/b&gt;. Seam provides some handy annotations to save some of the configuration overhead in creating a converter (see&amp;nbsp;&lt;a href="http://docs.jboss.org/seam/2.2.0.GA/reference/en-US/html/controls.html#controls.annotations"&gt;section 33.2 in the Seam reference&lt;/a&gt;&amp;nbsp;for details). However, if you are using the same converter with different attribute values on the same page, Seam will reuse the same instance with the same attribute values on the entire page. &lt;i&gt;Note: this might be avoidable by using the STATELESS scope, but I haven't tried it&lt;/i&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;h2&gt;Create taglib.xml&lt;/h2&gt;Now we need to create a Facelets tag library definition. We'll call it &lt;b&gt;orr-taglib.xml&lt;/b&gt; and put it in &lt;b&gt;WebContent/META-INF&lt;/b&gt;:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;!DOCTYPE facelet-taglib PUBLIC&lt;br /&gt;"-//Sun Microsystems, Inc.//DTD Facelet Taglib 1.0//EN"&lt;br /&gt;"http://java.sun.com/dtd/facelet-taglib_1_0.dtd"&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;facelet-taglib&amp;gt;&lt;br /&gt; &amp;lt;namespace&amp;gt;http://jerryorr.blogspot.com/customConverterTaglib&amp;lt;/namespace&amp;gt;&lt;br /&gt; &amp;lt;tag&amp;gt;&lt;br /&gt;  &amp;lt;tag-name&amp;gt;convertPhoneNumber&amp;lt;/tag-name&amp;gt;&lt;br /&gt;  &amp;lt;converter&amp;gt;&lt;br /&gt;   &amp;lt;converter-id&amp;gt;orr.convertPhoneNumber&amp;lt;/converter-id&amp;gt;&lt;br /&gt;  &amp;lt;/converter&amp;gt;&lt;br /&gt; &amp;lt;/tag&amp;gt;&lt;br /&gt;&amp;lt;/facelet-taglib&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;We also need to register the taglib in web.xml:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: xml"&gt;&amp;lt;context-param&amp;gt;&lt;br /&gt; &amp;lt;param-name&amp;gt;facelets.LIBRARIES&amp;lt;/param-name&amp;gt;&lt;br /&gt; &amp;lt;param-value&amp;gt;/META-INF/orr-taglib.xml&amp;lt;/param-value&amp;gt;&lt;br /&gt;&amp;lt;/context-param&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;h2&gt;Register converter in faces-config.xml&lt;/h2&gt;Next, we need to register our converter in faces-config.xml.&lt;i&gt;&amp;nbsp;Note: this is one of those steps that Seam can save for us, but since we aren't making this a Seam component, we need to register the converter manually&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: xml"&gt;&amp;lt;converter&amp;gt;&lt;br /&gt;  &amp;lt;converter-id&amp;gt;orr.convertPhoneNumber&amp;lt;/converter-id&amp;gt;&lt;br /&gt;  &amp;lt;converter-class&amp;gt;org.orr.customconverter.PhoneNumberConverter&amp;lt;/converter-class&amp;gt;&lt;br /&gt; &amp;lt;/converter&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;h2&gt;Create a TLD&lt;/h2&gt;Finally, we'll create a tag library descriptor. This step is not strictly necessary, but Eclipse will use it for autocomplete.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;taglib version="2.1" xmlns="http://java.sun.com/xml/ns/javaee"&lt;br /&gt; xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt; xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd"&amp;gt;&lt;br /&gt; &amp;lt;tlib-version&amp;gt;2.0&amp;lt;/tlib-version&amp;gt;&lt;br /&gt; &amp;lt;short-name&amp;gt;n&amp;lt;/short-name&amp;gt;&lt;br /&gt; &amp;lt;uri&amp;gt;http://jerryorr.blogspot.com/customConverterTaglib&amp;lt;/uri&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;tag&amp;gt;&lt;br /&gt;  &amp;lt;description&amp;gt;Converts a USAPhoneNumber.&amp;lt;/description&amp;gt;&lt;br /&gt;  &amp;lt;name&amp;gt;convertPhoneNumber&amp;lt;/name&amp;gt;&lt;br /&gt;  &amp;lt;tag-class&amp;gt;org.orr.customconverter.PhoneNumberConverter&amp;lt;/tag-class&amp;gt;&lt;br /&gt;  &amp;lt;body-content&amp;gt;JSP&amp;lt;/body-content&amp;gt;&lt;br /&gt;  &amp;lt;attribute&amp;gt;&lt;br /&gt;   &amp;lt;description&amp;gt;Style to display the phone number. Valid values include parentheses, dashes, spaces&amp;lt;/description&amp;gt;&lt;br /&gt;   &amp;lt;name&amp;gt;style&amp;lt;/name&amp;gt;&lt;br /&gt;   &amp;lt;rtexprvalue&amp;gt;true&amp;lt;/rtexprvalue&amp;gt;&lt;br /&gt;   &amp;lt;deferred-value&amp;gt;&lt;br /&gt;    &amp;lt;type&amp;gt;java.lang.String&amp;lt;/type&amp;gt;&lt;br /&gt;   &amp;lt;/deferred-value&amp;gt;&lt;br /&gt;  &amp;lt;/attribute&amp;gt;&lt;br /&gt; &amp;lt;/tag&amp;gt;&lt;br /&gt;&amp;lt;/taglib&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;h2&gt;Using the converter&lt;/h2&gt;Now we can use our phone number converter! We'll create a simple Seam component to interact with:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: java"&gt;package org.orr.customconverter;&lt;br /&gt;&lt;br /&gt;import java.io.Serializable;&lt;br /&gt;&lt;br /&gt;import org.jboss.seam.ScopeType;&lt;br /&gt;import org.jboss.seam.annotations.In;&lt;br /&gt;import org.jboss.seam.annotations.Name;&lt;br /&gt;import org.jboss.seam.annotations.Scope;&lt;br /&gt;import org.jboss.seam.international.StatusMessage.Severity;&lt;br /&gt;import org.jboss.seam.international.StatusMessages;&lt;br /&gt;&lt;br /&gt;@Name("updatePhoneNumberAction")&lt;br /&gt;@Scope(ScopeType.SESSION)&lt;br /&gt;public class UpdatePhoneNumberAction implements Serializable {&lt;br /&gt; private static final long serialVersionUID = 1L;&lt;br /&gt;&lt;br /&gt; private USAPhoneNumber phoneNumber = new USAPhoneNumber("212", "555",&lt;br /&gt;   "3456");&lt;br /&gt;&lt;br /&gt; @In&lt;br /&gt; StatusMessages statusMessages;&lt;br /&gt;&lt;br /&gt; public USAPhoneNumber getPhoneNumber() {&lt;br /&gt;  return phoneNumber;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void setPhoneNumber(USAPhoneNumber phoneNumber) {&lt;br /&gt;  this.phoneNumber = phoneNumber;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void update() {&lt;br /&gt;  statusMessages.add(Severity.INFO, "Phone number updated: "&lt;br /&gt;    + phoneNumber);&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;And a simple Facelets view to interact with it:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush: xml"&gt;&amp;lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"&lt;br /&gt;   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&amp;gt;&lt;br /&gt;&amp;lt;f:view xmlns="http://www.w3.org/1999/xhtml"&lt;br /&gt; xmlns:f="http://java.sun.com/jsf/core"&lt;br /&gt; xmlns:h="http://java.sun.com/jsf/html"&lt;br /&gt; xmlns:o="http://jerryorr.blogspot.com/customConverterTaglib"&lt;br /&gt; contentType="text/html"&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;h:messages /&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;h:form&amp;gt;&lt;br /&gt;  &amp;lt;h:panelGrid columns="2" border="1"&amp;gt;&lt;br /&gt;   &amp;lt;h:outputText value="Style" style="font-weight: bold" /&amp;gt;&lt;br /&gt;   &amp;lt;h:outputText value="Output" style="font-weight: bold" /&amp;gt;&lt;br /&gt;&lt;br /&gt;   &amp;lt;h:outputText value="(default)" /&amp;gt;&lt;br /&gt;   &amp;lt;h:outputText value="#{updatePhoneNumberAction.phoneNumber}"&amp;gt;&lt;br /&gt;    &amp;lt;o:convertPhoneNumber /&amp;gt;&lt;br /&gt;   &amp;lt;/h:outputText&amp;gt;&lt;br /&gt;&lt;br /&gt;   &amp;lt;h:outputText value="parentheses" /&amp;gt;&lt;br /&gt;   &amp;lt;h:outputText value="#{updatePhoneNumberAction.phoneNumber}"&amp;gt;&lt;br /&gt;    &amp;lt;o:convertPhoneNumber style="parentheses" /&amp;gt;&lt;br /&gt;   &amp;lt;/h:outputText&amp;gt;&lt;br /&gt;&lt;br /&gt;   &amp;lt;h:outputText value="spaces" /&amp;gt;&lt;br /&gt;   &amp;lt;h:outputText value="#{updatePhoneNumberAction.phoneNumber}"&amp;gt;&lt;br /&gt;    &amp;lt;o:convertPhoneNumber style="spaces" /&amp;gt;&lt;br /&gt;   &amp;lt;/h:outputText&amp;gt;&lt;br /&gt;&lt;br /&gt;   &amp;lt;h:outputText value="dashes" /&amp;gt;&lt;br /&gt;   &amp;lt;h:outputText value="#{updatePhoneNumberAction.phoneNumber}"&amp;gt;&lt;br /&gt;    &amp;lt;o:convertPhoneNumber style="dashes" /&amp;gt;&lt;br /&gt;   &amp;lt;/h:outputText&amp;gt;&lt;br /&gt;  &amp;lt;/h:panelGrid&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;p&amp;gt;&lt;br /&gt;   Phone Number:&lt;br /&gt;   &amp;lt;h:inputText value="#{updatePhoneNumberAction.phoneNumber}"&amp;gt;&lt;br /&gt;    &amp;lt;o:convertPhoneNumber style="spaces" /&amp;gt;&lt;br /&gt;   &amp;lt;/h:inputText&amp;gt;&lt;br /&gt;   &amp;lt;h:commandButton action="#{updatePhoneNumberAction.update()}"&lt;br /&gt;    value="Update" /&amp;gt;&lt;br /&gt;  &amp;lt;/p&amp;gt;&lt;br /&gt; &amp;lt;/h:form&amp;gt;&lt;br /&gt;&amp;lt;/f:view&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;When we first load the page, we can see our converter in action:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-peaHNXeSJo8/To9GojFCLxI/AAAAAAAAAAM/2fF_7qBqfUY/s1600/udpatePhoneNumber+screenshot+1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-peaHNXeSJo8/To9GojFCLxI/AAAAAAAAAAM/2fF_7qBqfUY/s1600/udpatePhoneNumber+screenshot+1.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;And since we have our converter on the inputText component, we can see it converter back to a USAPhoneNumber when we add an extension:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-3yIO2bc8guc/To9HI8pqmOI/AAAAAAAAAAQ/EVYAc6QoIBI/s1600/udpatePhoneNumber+screenshot+2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-3yIO2bc8guc/To9HI8pqmOI/AAAAAAAAAAQ/EVYAc6QoIBI/s320/udpatePhoneNumber+screenshot+2.png"  /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Hopefully, all of this will be a lot easier in future versions of JSF. For those of us stuck on JSF 1.2, though, creating our own converters with attributes can come in handy!&lt;br /&gt;&lt;br /&gt;&lt;link href="http://alexgorbatchev.com/pub/sh/2.1.364/styles/shCore.css" rel="stylesheet" type="text/css"&gt;&lt;/link&gt;  &lt;link href="http://alexgorbatchev.com/pub/sh/2.1.364/styles/shThemeDefault.css" rel="stylesheet" type="text/css"&gt;&lt;/link&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shCore.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushXml.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushCss.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushJava.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushPhp.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script src="http://alexgorbatchev.com/pub/sh/2.1.364/scripts/shBrushJScript.js" type="text/javascript"&gt;&lt;/script&gt;  &lt;script type="text/javascript"&gt;SyntaxHighlighter.config.bloggerMode = true; SyntaxHighlighter.defaults['toolbar'] = true; SyntaxHighlighter.all(); &lt;/script&gt;</content>
      <link rel="replies" type="application/atom+xml" href="http://blog.jerryorr.com/feeds/3711433175506204301/comments/default" title="Post Comments" />
      <link rel="replies" type="text/html" href="http://blog.jerryorr.com/2011/10/creating-jsf-12-custom-converter-with.html#comment-form" title="1 Comments" />
      <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/3711433175506204301" />
      <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/6466545174058573557/posts/default/3711433175506204301" />
      <link rel="alternate" type="text/html" href="http://blog.jerryorr.com/2011/10/creating-jsf-12-custom-converter-with.html" title="Creating a JSF 1.2 Custom Converter with Attributes" />
      <author>
         <name>Jerry Orr</name>
         <uri>http://www.blogger.com/profile/06855141821400610431</uri>
         <email>noreply@blogger.com</email>
         <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="25" height="32" src="http://2.bp.blogspot.com/-t8W_uziUTT8/To9NhZ9vqbI/AAAAAAAAAAc/5tVtYT29bwo/s220/jerry%2Bheadshot.jpg" />
      </author>
      <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://1.bp.blogspot.com/-peaHNXeSJo8/To9GojFCLxI/AAAAAAAAAAM/2fF_7qBqfUY/s72-c/udpatePhoneNumber+screenshot+1.png" height="72" width="72" />
      <thr:total>1</thr:total>
   </entry>
</feed>